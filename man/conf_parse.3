.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\" --------------------------------------------------------------------------
.TH "CONFETTI" "3" "June 6th 2025" "Confetti 1.0.0-rc.2"
.SH NAME
conf_parse \- parse confetti
.\" --------------------------------------------------------------------------
.SH LIBRARY
Configuration parser (libconfetti, -lconfetti)
.\" --------------------------------------------------------------------------
.SH SYNOPSIS
.nf
.B #include <confetti.h>
.PP
.BI "conf_unit *conf_parse(const char *" str ", const conf_options *" opts ", conf_error *" err ");"
.fi
.\" --------------------------------------------------------------------------
.SH DESCRIPTION
The \fBconf_parse\fR() function parses \fIstr\fR as Confetti source text and constructs an in-memory representation of the processed configuration unit.
It must be freed with \fBconf_free\fR(3).
.PP
If an error occurs during parsing, then NULL is returned and \fIerr\fR, if provided, is populated with error details.
.PP
Any pointers returned by functions listed in SEE ALSO are managed by the unit and do not require separate deallocation.
They remain valid until the unit is freed with \fBconf_free\fR(3).
.PP
The behavior of the Confetti parser can be controlled with the optional \fIopts\fR argument which is documented below.
.\" --------------------------------------------------------------------------
.SS Error structure
The \fBconf_error\fR structure includes the following fields:
.PP
.in +4n
.EX
long where;
conf_errno code;
char description[48];
.EE
.in
.PP
The \fIcode\fR field will be populated by the implementation with a constant described in RETURN VALUE.
.PP
The \fIwhere\fR field will be populated by the implementation with the UTF-8 code unit index of the location where the error occurred in \fIstr\fR.
.PP
The \fIdescription\fR field will be populated by the implementation with an error message localized in US English.
.\" --------------------------------------------------------------------------
.SS Options structure
The \fBconf_options\fR structure includes the following fields:
.PP
.in +4n
.EX
int max_depth;
bool allow_bidi;
conf_allocfn allocator;
void *user_data;
conf_extensions *extensions;
.EE
.in
.PP
The \fImax_depth\fR field, if non-zero, specifies the maximum nesting depth of Confetti subdirectives.
.PP
The \fIallow_bidi\fR field, if true, allows bidirectional formatting characters in \fIstr\fR.
It is recommended to disable these characters, unless an implementation is prepared to properly process them.
Mishandling these characters can result in unexpected behaviors, such as the Trojan Source vulnerability.
.PP
The \fIallocator\fR field, if non-NULL, must point to a user implemented custom memory allocator, the behavior of which is described in the following subsection.
.PP
The \fIuser_data\fR field is a user pointer passed to the \fIallocator\fR function as-is.
It is also passed to the callback associated with the \fBconf_walk\fR(3) function.
.PP
The \fIextensions\fR field, if non-NULL, refers to the extensions structure as documented in the subsequent subsection.
.\" --------------------------------------------------------------------------
.SS Extensions structure
The \fBconf_extensions\fR structure includes the following fields:
.PP
.in +4n
.EX
const char **punctuator_arguments;
bool c_style_comments;
bool expression_arguments;
.EE
.in
.PP
The \fIpunctuator_arguments\fR field is an array of strings where each string is to be interpreted as a punctuator argument. The last element must be NULL to terminate the array.
.PP
The \fIc_style_comments\fR field, if true, enables C style single and multi-line comments.
.PP
The \fIexpression_arguments\fR field, if true, interprets arguments enclosed in parentheses as expressions.
.\" --------------------------------------------------------------------------
.SS Allocator function
The \fBconf_allocfn\fR function accepts three arguments:
.PP
.in +4n
.EX
void *ud;
void *ptr;
size_t size;
.EE
.in
.PP
If the \fIptr\fR argument is NULL, then the implementation must behave like \fBmalloc\fR(3) and return a valid pointer, otherwise, it must behave like \fBfree\fR(3) and free \fIptr\fR and return NULL.
The \fIsize\fR argument is either the size of the memory being allocated or the size of the memory being freed depending on if the implementation is to behave like \fBmalloc\fR(3) or \fBfree\fR(3).
.\" --------------------------------------------------------------------------
.SH RETURN VALUE
The \fBconf_parse\fR() function returns an instance of a Confetti configuration unit or NULL if an error occurs.
If an error occurs, then \fIerr\fR, if provided, will be populated with one of the following \fBconf_errno\fR constants:
.TP
.BR CONF_NO_ERROR
When \fIstr\fR is parsed without errors.
.TP
.BR CONF_OUT_OF_MEMORY
If dynamic memory allocation fails.
The implementation guarantees all intermediate allocations will be freed to avoid resource leakage.
.TP
.BR CONF_BAD_SYNTAX,
If a Confetti syntax error is discovered.
.TP
.BR CONF_ILLEGAL_BYTE_SEQUENCE,
If a malformed UTF-8 sequence is found.
.TP
.BR CONF_INVALID_OPERATION
If \fIstr\fR is NULL.
.TP
.BR CONF_MAX_DEPTH_EXCEEDED
If the maximum subdirective nesting depth is exceeded.
.\" --------------------------------------------------------------------------
.SH EXAMPLES
The following snippet demonstrates how to parse Confetti source text with \fBconf_parse\fR().
The string "..." is used as a placeholder for a Confetti source string.
.PP
.in +4n
.EX
conf_error error = {0};
conf_unit *unit = conf_parse("...", NULL, &error);
if (unit == NULL) {
    printf("error: %s\n", error.description);
}
.EE
.in
.PP
The following snippet demonstrates how to set options and extensions with the \fBconf_options\fR and \fBconf_extensions\fR structures.
This particular example enables the punctuator arguments extension to treat ":=", "+", and "-" as distinct arguments.
It also limits the maximum subdirective nesting depth to ten.
.PP
.in +4n
.EX
const char *punctuators[] = {":=", "+", "-", NULL};
const conf_extensions extensions = {
    .punctuator_arguments = punctuators,
};

const conf_options options = {
    .extensions = &extensions,
    .max_depth = 10,
};

conf_unit *unit = conf_parse("...", &options, NULL);
.EE
.in
.PP
The \fBconf_options\fR structure accepts a custom memory allocator that must behave like \fBmalloc\fR(3) or \fBfree\fR(3) depending on how it's called.
The following snippet shows a simple implementation of a custom memory allocator.
.PP
.PP
.in +4n
.EX
void *allocator(void *ud, void *ptr, size_t size) {
    if (ptr == NULL) {
        return malloc(size);
    } else {
        free(ptr);
        return NULL;
    }
}

const conf_options options = { .allocator = &allocator };
conf_unit *unit = conf_parse("...", &options, NULL);
.EE
.in
.\" --------------------------------------------------------------------------
.SH SEE ALSO
.BR conf_free (3),
.BR conf_get_root (3),
.BR conf_get_comment (3),
.BR conf_get_comment_count (3),
.BR conf_get_directive (3),
.BR conf_get_directive_count (3),
.BR conf_get_argument (3),
.BR conf_get_argument_count (3)
.\" --------------------------------------------------------------------------
.SH LICENSING
Confetti is Open Source software distributed under the MIT License.
Please see the LICENSE file included with the Confetti distribution for details.
